File Path: src\app\form-builder\page.tsx
Contents:
import React from 'react';
import FormBuilder from './_components/FormBuilder';

const Page = () => {
  return (
    <div className="w-full h-screen">
      <FormBuilder />
    </div>
  );
};

export default Page;

--------------------------------------------------

File Path: src\app\form-builder\_components\design-context\index.tsx
Contents:
import React, { createContext, useState, ReactNode, useContext } from "react";
import { ElementsTypes, FormElement, FormElements } from "../types";
import { FormElementTypes } from "../types/elements";

interface FormElementsContextType {
	formElements: FormElements;
	order: string[];
	addFormElement: (type: keyof FormElements) => void;
	updateFormElementPayload: (
		id: string,
		updatedPayload: Partial<FormElement["payload"]>
	) => void;
	removeFormElement: (id: string) => void;
	updateOrder: (newOrder: string[]) => void; // New function to update the order
	setSelectedElement: (id: string | null) => void;
	selectedElementId: string | null;
}

const FormElementsContext = createContext<FormElementsContextType | undefined>(
	undefined
);

interface FormElementsProviderProps {
	children: ReactNode;
}

export const FormElementsProvider: React.FC<FormElementsProviderProps> = ({
	children,
}) => {
	const [formElements, setFormElements] = useState<FormElements>({});
	const [order, setOrder] = useState<string[]>([]);
	const [selectedElementId, setSelectedElementId] = useState<string | null>(
		null
	);

	const addFormElement = (type: keyof FormElements): string => {
		const element = new FormElement(
			type as ElementsTypes,
			FormElementTypes[type].sidebarElement.icon,
			FormElementTypes[type].sidebarElement.label
		);
		setFormElements((prev) => ({ ...prev, [element.id]: element }));
		return element.id;
	};

	const updateFormElementPayload = (
		id: string,
		updatedPayload: Partial<FormElement["payload"]>
	) => {
		setFormElements((prev) => ({
			...prev,
			[id]: {
				...prev[id],
				payload: { ...prev[id].payload, ...updatedPayload },
			},
		}));
	};

	const removeFormElement = (id: string) => {
		setFormElements((prev) => {
			const newElements = { ...prev };
			delete newElements[id];
			return newElements;
		});
		setOrder((prevOrder) =>
			prevOrder.filter((elementId) => elementId !== id)
		);
	};

	// Update order function
	const updateOrder = (newOrder: string[]) => {
		setOrder(newOrder);
	};

	const setSelectedElement = (id: string | null) => {
		setSelectedElementId(id);
	};

	return (
		<FormElementsContext.Provider
			value={{
				formElements,
				order,
				addFormElement,
				updateFormElementPayload,
				removeFormElement,
				updateOrder,
				setSelectedElement,
				selectedElementId,
			}}
		>
			{children}
		</FormElementsContext.Provider>
	);
};

export const useFormElements = (): FormElementsContextType => {
	const context = useContext(FormElementsContext);
	if (!context) {
		throw new Error(
			"useFormElements must be used within a FormElementsProvider"
		);
	}
	return context;
};

--------------------------------------------------

File Path: src\app\form-builder\_components\design-mode\index.tsx
Contents:
import React from "react";
import { useDroppable } from "@dnd-kit/core";
import SideBarButtons from "../sidebar-elements";
import { useFormElements } from "../design-context";
import RootFormDesignElement from "../form-design-elements/RootFormDesignElement";
import DragOverlayWrapper from "../drag-overlay/DragOverlay";

const DesignMode = () => {
	const { formElements,order } = useFormElements();
	const dropArea = useDroppable({
		id: "designer-drop-area",
		data: { isDesignerDropArea: true },
	});

	return (
		<div className="w-full h-full grid grid-cols-[1fr,350px] gap-3 bg-slate-900 graph-content">
			<div className="w-full h-full overflow-y-auto p-5 flex justify-center items-center">
				<div
					ref={dropArea.setNodeRef}
					className={`w-4/5 h-full space-y-3 p-5 rounded-md bg-slate-950 ${
						dropArea.isOver ? "ring-2 ring-primary" : ""
					}`}
				>
					{/* Display message when the order is empty and the drop area is not hovered */}
          {order.length === 0 && !dropArea.isOver && (
            <span className="text-white">Drop the element</span>
          )}

          {/* Show a visual indication when the drop area is hovered, and there are items */}
          {dropArea.isOver && order.length === 0 && (
            <div className="w-full p-1">
              <div className="w-full h-[120px] rounded-md bg-primary/10"></div>
            </div>
          )}
					{order.map((key) => (
						<RootFormDesignElement
							key={key}
							type={formElements[key].type}
							id={formElements[key].id}
						/>
					))}
				</div>
			</div>
			<div className="w-full h-full overflow-y-auto py-4 bg-slate-950">
				<SideBarButtons />
			</div>
			<DragOverlayWrapper />
		</div>
	);
};

export default DesignMode;

--------------------------------------------------

File Path: src\app\form-builder\_components\drag-overlay\DragOverlay.tsx
Contents:
"use client";

import React, { useState } from "react";
import { DragableOverlayButton } from "../sidebar-elements";
import {
	Active,
	DragOverlay,
	useDndMonitor,
	DragEndEvent,
} from "@dnd-kit/core";
import { FormElementTypes } from "../types/elements";
import { useFormElements } from "../design-context";
import RootFormDesignElement from "../form-design-elements/RootFormDesignElement";

const DragOverlayWrapper = () => {
	const { addFormElement, setSelectedElement, order, updateOrder } =
		useFormElements();
	const [dragableItems, setDragableItems] = useState<Active | null>(null);

	// Monitor drag events
	useDndMonitor({
		onDragStart: (event) => {
			setDragableItems(event.active);
			console.log("Drag Start", event.active);
		},
		onDragCancel: () => {
			setDragableItems(null);
			console.log("Drag Canceled");
		},
		onDragEnd: (event: DragEndEvent) => {
			const { active, over } = event;

			if (
				over?.id === "designer-drop-area" &&
				active.data.current?.isDesignBtnElement
			) {
				const type = active.data.current?.type;
				if (type in FormElementTypes) {
					const elementId:string = addFormElement(type);
					order.push(elementId as string)
					updateOrder(order);
				}
			} else if (over?.id) {
				const overData: string = over.id as string;
				const [overId, position] = overData.split(":");

				const elementIndex = order.findIndex(
					(id: string) => id === overId
				);
				console.log(active, "ACTIVEIDDD");

				if (!active.data?.current?.elementId) {
					const type = active.data.current?.type;

					if (type && type in FormElementTypes) {
						const elementId = addFormElement(type); // Create new form element

						if (elementId) {
							const updatedOrder = [...order];
							if (position === "top" && elementIndex !== -1) {
								updatedOrder.splice(elementIndex, 0, elementId); // Insert before
							} else if (
								position === "bottom" &&
								elementIndex !== -1
							) {
								updatedOrder.splice(
									elementIndex + 1,
									0,
									elementId
								); // Insert after
							}
							updateOrder(updatedOrder); // Update the order with new element
						}
					}
				} else if (
					elementIndex !== -1 &&
					active?.data?.current?.elementId
				) {
					let updatedOrder = [...order];
					updatedOrder = updatedOrder.filter(
						(id) => id !== active?.data?.current?.elementId
					);
					updateOrder(updatedOrder);

					// Now, insert the dragged element in the correct position (top or bottom)
					if (position === "top") {
						updatedOrder.splice(
							elementIndex,
							0,
							active?.data?.current?.elementId as string
						); // Insert before
					} else {
						updatedOrder.splice(
							elementIndex + 1,
							0,
							active?.data?.current?.elementId as string
						); // Insert after
					}

					updateOrder(updatedOrder); // Update the order after reordering
				}
			}

			setDragableItems(null);
			setSelectedElement(null);
			console.log("Drag End", event);
		},
	});

	// If there's nothing to drag, return null
	if (!dragableItems) return null;

	// Check if the current draggable is from the sidebar
	const isSidebarButtonElement =
		dragableItems.data?.current?.isDesignBtnElement;

	let node = <div>No Drag Overlay</div>;

	if (isSidebarButtonElement) {
		const type = dragableItems.data?.current?.type;

		if (type in FormElementTypes) {
			node = (
				<DragableOverlayButton
					icon={FormElementTypes[type].sidebarElement.icon}
					label={FormElementTypes[type].sidebarElement.label}
				/>
			);
		}
	}

	const isDesignerElement = dragableItems.data?.current?.isDesignerElement;
	if (isDesignerElement) {
		const id = dragableItems.data.current?.elementId;
		const type = dragableItems.data?.current?.type;
		const element = order.find(
			(formElementId: string) => formElementId === id
		);
		console.log(element);
		node = <RootFormDesignElement type={type} id={id} />;
	}

	return <DragOverlay>{node}</DragOverlay>;
};

export default DragOverlayWrapper;

--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\NumberField.tsx
Contents:
import React from 'react'
import { FormElement } from '../types'

const NumberField = ({formElement}:{formElement:FormElement}) => {
  console.log(formElement)
  return (
	<div>NumberField</div>
  )
}

export default NumberField
--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\PasswordField.tsx
Contents:
import React from 'react'
import { FormElement } from '../types'

const PasswordField = ({formElement}:{formElement:FormElement}) => {
  console.log(formElement)
  return (
	<div>PasswordField</div>
  )
}

export default PasswordField
--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\RootFormDesignElement.tsx
Contents:
import React, { useState } from "react";
import { ElementsTypes } from "../types";
import TextField from "./TextField";
import NumberField from "./NumberField";
import { FormElementTypes } from "../types/elements";
import { useDraggable, useDroppable } from "@dnd-kit/core";
import { FaRegTrashAlt } from "react-icons/fa";
import PasswordField from "./PasswordField";
import { useFormElements } from "../design-context";

const RootFormDesignElement = ({
	type,
	id,
}: {
	type: ElementsTypes;
	id: string;
}) => {
	const [mouseIsOver, setMouseIsOver] = useState<boolean>(false);
	const { setSelectedElement } = useFormElements();
	const topHalf = useDroppable({
		id: id + ":top",
		data: {
			type,
			elementId: id,
			isTopHalfDesignerElement: true,
		},
	});
	const bottomHalf = useDroppable({
		id: id + ":bottom",
		data: {
			type,
			elementId: id,
			isBottomHalfDesignerElement: true,
		},
	});

	const dragable = useDraggable({
		id: id + ":drag-handler",
		data: {
			type,
			elementId: id,
			isDesignerElement: true,
		},
	});

	return (
		<div
			className="relative w-full h-auto p-4 rounded-md border-1 border-divider overflow-hidden"
			onMouseEnter={() => setMouseIsOver(true)}
			onMouseLeave={() => setMouseIsOver(false)}
			ref={dragable.setNodeRef}
			{...dragable.listeners}
			{...dragable.attributes}
			onClick={(e) => {
				e.stopPropagation()
				setSelectedElement(id)
				console.log(id,'ID CONSOLING')
			}}
		>
			<div
				className="w-full h-1/2 rounded-full absolute top-0 left-0"
				ref={topHalf.setNodeRef}
			></div>
			{getContent(type)}
			<div
				className="w-full h-1/2 rounded-full absolute bottom-0 left-0"
				ref={bottomHalf.setNodeRef}
			></div>
			{topHalf.isOver && (
				<div className="w-full h-1 rounded-full bg-white absolute top-0 left-0"></div>
			)}
			{bottomHalf.isOver && (
				<div className="w-full h-1 rounded-full bg-white absolute bottom-0 left-0"></div>
			)}
			{mouseIsOver && (
				<div className="w-full h-full absolute left-0 top-0 bg-slate-800/20 backdrop-blur grid grid-cols-[_1fr,40px] cursor-grab">
					<span
						className={`w-full h-full flex justify-center items-center text-gray-500`}
					>
						Click or Drag and Drop to move element
					</span>
					<div className="w-full h-full bg-red-500 flex justify-center items-center cursor-pointer">
						<FaRegTrashAlt className="w-4 h-4 text-white" />
					</div>
				</div>
			)}
		</div>
	);
};

const getContent = (type: ElementsTypes) => {
	let content;
	switch (type) {
		case "TextField":
			content = <TextField formElement={FormElementTypes[type]} />;
			break;
		case "NumberField":
			content = <NumberField formElement={FormElementTypes[type]} />;
			break;
		case "PasswordField":
			content = <PasswordField formElement={FormElementTypes[type]} />;
			break;
		default:
			content = <div>Unsupported Element</div>;
	}
	return content;
};

export default RootFormDesignElement;

--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\TextField.tsx
Contents:
import React from 'react'
import { FormElement } from '../types'

const TextField = ({formElement}:{formElement:FormElement}) => {
  console.log(formElement)
  return (
	<div>TextField</div>
  )
}

export default TextField
--------------------------------------------------

File Path: src\app\form-builder\_components\FormBuilder.tsx
Contents:
'use client';

import { DndContext } from '@dnd-kit/core';
import React, { useState } from 'react';
import { PiSunBold, PiMoonStarsBold } from 'react-icons/pi';
import { FormElementsProvider } from './design-context';
import DesignMode from './design-mode';

const FormBuilder = () => {
  const [theme, setTheme] = useState<boolean>(false);

  return (
    <DndContext>
      <FormElementsProvider>
        <div className="w-full h-full grid grid-rows-[80px,1fr]">
          <div className="w-full flex justify-between items-center px-5 border-b border-gray-800">
            <h1 className="text-xl text-white">Project 1</h1>
            <div className="flex items-center gap-1 relative">
              <button className={`w-7 h-7 p-1 ${theme ? 'text-white' : 'text-gray-700'}`} onClick={() => setTheme(true)}>
                <PiSunBold />
              </button>
              <button className={`w-7 h-7 p-1 ${theme ? 'text-gray-700' : 'text-white'}`} onClick={() => setTheme(false)}>
                <PiMoonStarsBold />
              </button>
            </div>
          </div>
          <DesignMode />
        </div>
      </FormElementsProvider>
    </DndContext>
  );
};

export default FormBuilder;

--------------------------------------------------

File Path: src\app\form-builder\_components\sidebar-elements\index.tsx
Contents:
import { FormElement } from "@/app/form-builder/_components/types";
import { FormElementTypes } from "@/app/form-builder/_components/types/elements";
import { useDraggable } from "@dnd-kit/core";
import React from "react";

const SideBarButtons = () => {
	return (
		<div className="w-full h-auto grid grid-cols-2 gap-3 px-3">
			{Object.keys(FormElementTypes).map((items: string) => (
				<DragableButton
					formElement={FormElementTypes[items]}
					key={FormElementTypes[items].id}
				/>
			))}
		</div>
	);
};

export default SideBarButtons;

const DragableButton = ({ formElement }: { formElement: FormElement }) => {
	const { icon: Icon, label } = formElement.sidebarElement;
	const dragable = useDraggable({
		id: "design-btn-" + formElement.type,
		data: {
			isDesignBtnElement: true,
			type: formElement.type,
		},
	});
	return (
		<button
			ref={dragable.setNodeRef}
			className={`w-full h-auto p-3 rounded-md border-divider border-1 place-items-center grid grid-cols-1 ${
				dragable.isDragging && "ring-2 ring-primary"
			}`}
			{...dragable.listeners}
			{...dragable.attributes}
		>
			<Icon className="w-7 h-7 text-white" />
			<span className="text-xs text-white">{label}</span>
		</button>
	);
};

interface OverlayButton {
	icon: React.ElementType;
	label: string;
}

export const DragableOverlayButton = (element: OverlayButton) => {
	const { icon: Icon, label } = element;
	return (
		<button
			className={`w-full h-auto p-3 rounded-md border-divider border-1 bg-slate-950 place-items-center grid grid-cols-1`}
		>
			<Icon className="w-7 h-7 text-white" />
			<span className="text-xs text-white">{label}</span>
		</button>
	);
};

--------------------------------------------------

File Path: src\app\form-builder\_components\types\elements.ts
Contents:
// elements.ts

import { FormElement, FormElements } from ".";
import { MdTextFields } from "react-icons/md";
import { TbNumber123 } from "react-icons/tb";
import { TbPasswordUser } from "react-icons/tb";

export const FormElementTypes: FormElements = {
  TextField: new FormElement("TextField", MdTextFields, "Text Field"),
  NumberField: new FormElement("NumberField", TbNumber123, "Number Field"),
  PasswordField: new FormElement("PasswordField", TbPasswordUser, "Password Field"),
};

// export const 
--------------------------------------------------

File Path: src\app\form-builder\_components\types\index.ts
Contents:
// types/index.d.ts

import React from "react";

export type ElementsTypes = "TextField" | "PasswordField" | "NumberField";

export interface FormElementPayload {
  name: string;
  required?: boolean;
  placeholder?: string;
  options?: string[];
  type?: string;
}

export class FormElement {
  id: string;
  type: ElementsTypes;
  sidebarElement: {
    icon: React.ElementType;
    label: string;
  };
  payload: FormElementPayload;

  constructor(
    type: ElementsTypes,
    icon: React.ElementType,
    label: string,
    payload?: Partial<FormElementPayload>
  ) {
    this.id = crypto.randomUUID();
    this.type = type;
    this.sidebarElement = { icon, label };
    this.payload = {
      name: label.toLowerCase().replace(/\s+/g, "-"),
      required: false,
      placeholder: `Enter ${label.toLowerCase()}...`,
      type,
      ...payload,
    };
  }
}

export type FormElements = {
  [formElementId: string]: FormElement;
};

--------------------------------------------------

