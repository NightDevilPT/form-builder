File Path: src\app\form-builder\page.tsx
Contents:
import React from 'react';
import FormBuilder from './_components/FormBuilder';

const Page = () => {
  return (
    <div className="w-full h-screen bg-background">
      <FormBuilder />
    </div>
  );
};

export default Page;

--------------------------------------------------

File Path: src\app\form-builder\_components\design-context\index.tsx
Contents:
import React, { createContext, useState, ReactNode, useContext } from "react";
import { ElementsTypes, FormElement, FormElements } from "../types";
import { FormElementTypes } from "../types/elements";

interface FormElementsContextType {
	formElements: FormElements;
	order: string[];
	addFormElement: (type: keyof FormElements) => void;
	updateFormElementPayload: (
		id: string,
		updatedPayload: Partial<FormElement["payload"]>
	) => void;
	removeFormElement: (id: string) => void;
	updateOrder: (newOrder: string[]) => void; // New function to update the order
	setSelectedElement: (id: string | null) => void;
	selectedElementId: string | null;
}

const FormElementsContext = createContext<FormElementsContextType | undefined>(
	undefined
);

interface FormElementsProviderProps {
	children: ReactNode;
}

export const FormElementsProvider: React.FC<FormElementsProviderProps> = ({
	children,
}) => {
	const [formElements, setFormElements] = useState<FormElements>({});
	const [order, setOrder] = useState<string[]>([]);
	const [selectedElementId, setSelectedElementId] = useState<string | null>(
		null
	);

	const addFormElement = (type: keyof FormElements): string => {
		const element: FormElement = new FormElement(
			type as ElementsTypes,
			FormElementTypes[type].sidebarElement.icon,
			FormElementTypes[type].sidebarElement.label
		);
		setFormElements((prev) => ({ ...prev, [element.id]: element }));
		return element.id; // return the ID of the new form element
	};

	const updateFormElementPayload = (
		id: string,
		updatedPayload: Partial<FormElement["payload"]>
	) => {
		setFormElements((prev) => ({
			...prev,
			[id]: {
				...prev[id],
				payload: { ...prev[id].payload, ...updatedPayload },
			},
		}));
	};

	const removeFormElement = (id: string) => {
		setFormElements((prev) => {
			const newElements = { ...prev };
			delete newElements[id];
			return newElements;
		});
		setOrder((prevOrder) =>
			prevOrder.filter((elementId) => elementId !== id)
		);
		setSelectedElement(null);
	};

	// Update order function
	const updateOrder = (newOrder: string[]) => {
		setOrder(newOrder);
	};

	const setSelectedElement = (id: string | null) => {
		setSelectedElementId(id);
	};

	return (
		<FormElementsContext.Provider
			value={{
				formElements,
				order,
				addFormElement,
				updateFormElementPayload,
				removeFormElement,
				updateOrder,
				setSelectedElement,
				selectedElementId,
			}}
		>
			{children}
		</FormElementsContext.Provider>
	);
};

export const useFormElements = (): FormElementsContextType => {
	const context = useContext(FormElementsContext);
	if (!context) {
		throw new Error(
			"useFormElements must be used within a FormElementsProvider"
		);
	}
	return context;
};

--------------------------------------------------

File Path: src\app\form-builder\_components\design-mode\index.tsx
Contents:
import React from "react";
import { useDroppable } from "@dnd-kit/core";
import SideBarButtons from "../sidebar-elements";
import { useFormElements } from "../design-context";
import RootFormDesignElement from "../form-design-elements/RootFormDesignElement";
import DragOverlayWrapper from "../drag-overlay/DragOverlay";

const DesignMode = () => {
	const { formElements, order, setSelectedElement } = useFormElements();
	const dropArea = useDroppable({
		id: "designer-drop-area",
		data: { isDesignerDropArea: true },
	});

	return (
		<div className="w-full h-full grid grid-cols-[1fr,350px] graph-content bg-background">
			<div className="w-full h-full p-5 overflow-auto flex justify-center items-start">
				<div
					ref={dropArea.setNodeRef}
					className={`w-4/5 h-auto min-h-full p-5 rounded-md bg-background space-y-3 ${
						dropArea.isOver
							? "ring-2 ring-foreground-400"
							: "ring-2 ring-foreground-200"
					}`}
					onClick={() => setSelectedElement(null)}
				>
					{/* Display message when the order is empty and the drop area is not hovered */}
					{order.length === 0 && !dropArea.isOver && (
						<span className="text-foreground w-full h-full flex justify-center items-center">
							Drop the element
						</span>
					)}

					{/* Show a visual indication when the drop area is hovered, and there are items */}
					{dropArea.isOver && order.length === 0 && (
						<div className="w-full p-1">
							<div className="w-full h-16 rounded-md bg-divider"></div>
						</div>
					)}

					{order.map((key) => (
						<RootFormDesignElement
							key={key}
							type={formElements[key].type}
							id={formElements[key].id}
						/>
					))}
				</div>
			</div>
			<div className="w-full h-full overflow-y-auto py-4 bg-background border-l-1 border-divider">
				<SideBarButtons />
			</div>
			<DragOverlayWrapper />
		</div>
	);
};

export default DesignMode;

--------------------------------------------------

File Path: src\app\form-builder\_components\drag-overlay\DragOverlay.tsx
Contents:
"use client";

import React, { useState } from "react";
import { DragableOverlayButton } from "../sidebar-elements";
import {
	Active,
	DragOverlay,
	useDndMonitor,
	DragEndEvent,
} from "@dnd-kit/core";
import { FormElementTypes } from "../types/elements";
import { useFormElements } from "../design-context";
import RootFormDesignElement from "../form-design-elements/RootFormDesignElement";

const DragOverlayWrapper = () => {
	const { addFormElement, setSelectedElement, order, updateOrder } =
		useFormElements();
	const [dragableItems, setDragableItems] = useState<Active | null>(null);

	// Monitor drag events
	useDndMonitor({
		onDragStart: (event) => {
			setDragableItems(event.active);
			console.log("Drag Start", event.active);
		},
		onDragCancel: () => {
			setDragableItems(null);
			console.log("Drag Canceled");
		},
		onDragEnd: (event: DragEndEvent) => {
			const { active, over } = event;
			const activeData = active.data.current;
		  
			if (over?.id === "designer-drop-area") {
			  if (!activeData?.elementId) {
				const type = activeData?.type;
				if (type in FormElementTypes) {
				  const elementId:any = addFormElement(type);
				  order.push(elementId);
				  updateOrder(order);
				}
			  } else if (activeData?.elementId) {
				const activeId = activeData.elementId;
				const newOrder = order.filter(id => id !== activeId);
				newOrder.push(activeId);
				updateOrder(newOrder);
			  }
			} else if (over?.id && (active?.id as string)?.includes("design-btn-")) {
			  const [overId, position] = (over.id as string).split(":");
			  const elementIndex = order.findIndex(id => id === overId);
			  const type = activeData?.type;
		  
			  if (type in FormElementTypes) {
				const elementId:any = addFormElement(type);
				if (position === "top") {
				  order.splice(elementIndex, 0, elementId);
				} else {
				  order.splice(elementIndex + 1, 0, elementId);
				}
			  }
			} else if (over?.id && activeData?.elementId) {
			  const [overId, position] = (over.id as string).split(":");
			  const activeId = activeData.elementId;
			  const newOrder = order.filter(id => id !== activeId);
			  const elementIndex = newOrder.findIndex(id => id === overId);
		  
			  if (position === "top") {
				newOrder.splice(elementIndex, 0, activeId);
			  } else {
				newOrder.splice(elementIndex + 1, 0, activeId);
			  }
			  updateOrder(newOrder);
			}
		  
			setDragableItems(null);
			setSelectedElement(null);
			console.log("Drag End", event);
		  }
		  
	});

	// If there's nothing to drag, return null
	if (!dragableItems) return null;

	// Check if the current draggable is from the sidebar
	const isSidebarButtonElement =
		dragableItems.data?.current?.isDesignBtnElement;

	let node = <div>No Drag Overlay</div>;

	if (isSidebarButtonElement) {
		const type = dragableItems.data?.current?.type;

		if (type in FormElementTypes) {
			node = (
				<DragableOverlayButton
					icon={FormElementTypes[type].sidebarElement.icon}
					label={FormElementTypes[type].sidebarElement.label}
				/>
			);
		}
	}

	const isDesignerElement = dragableItems.data?.current?.isDesignerElement;
	if (isDesignerElement) {
		const id = dragableItems.data.current?.elementId;
		const type = dragableItems.data?.current?.type;
		const element = order.find(
			(formElementId: string) => formElementId === id
		);
		console.log(element);
		node = <RootFormDesignElement type={type} id={id} />;
	}

	return <DragOverlay>{node}</DragOverlay>;
};

export default DragOverlayWrapper;

--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\NumberField.tsx
Contents:
import React from "react";
import { FormElement } from "../types";

const NumberField = ({ formElement }: { formElement: FormElement }) => {
	const { placeholder, label } = formElement.payload;
	return (
		<div className="w-full h-auto grid grid-cols-1 gap-2">
			<div className="w-full h-auto p-0 text-sm px-1">{label}</div>
			<div className="w-full h-auto px-3 py-1 rounded-md bg-default-100 text-foreground-400 text-base">
				{placeholder}
			</div>
		</div>
	);
};

export default NumberField;

--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\PasswordField.tsx
Contents:
import React from 'react'
import { FormElement } from '../types'

const PasswordField = ({formElement}:{formElement:FormElement}) => {
  const { placeholder, label } = formElement.payload;
	return (
		<div className="w-full h-auto grid grid-cols-1 gap-2">
			<div className="w-full h-auto p-0 text-sm px-1">{label}</div>
			<div className="w-full h-auto px-3 py-1 rounded-md bg-default-100 text-foreground-400 text-base">
				{placeholder}
			</div>
		</div>
	);
}

export default PasswordField
--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\RootFormDesignElement.tsx
Contents:
import React, { useState } from "react";
import { ElementsTypes, FormElement } from "../types";
import TextField from "./TextField";
import { useDraggable, useDroppable } from "@dnd-kit/core";
import { FaRegTrashAlt } from "react-icons/fa";
import { useFormElements } from "../design-context";
import NumberField from "./NumberField";
import PasswordField from "./PasswordField";

const RootFormDesignElement = ({
	type,
	id,
}: {
	type: ElementsTypes;
	id: string;
}) => {
	const [mouseIsOver, setMouseIsOver] = useState<boolean>(false);
	const {
		setSelectedElement,
		removeFormElement,
		selectedElementId,
		formElements,
	} = useFormElements();
	const topHalf = useDroppable({
		id: id + ":top",
		data: {
			type,
			elementId: id,
			isTopHalfDesignerElement: true,
		},
	});
	const bottomHalf = useDroppable({
		id: id + ":bottom",
		data: {
			type,
			elementId: id,
			isBottomHalfDesignerElement: true,
		},
	});

	const dragable = useDraggable({
		id: id + ":drag-handler",
		data: {
			type,
			elementId: id,
			isDesignerElement: true,
		},
	});

	return (
		<div
			className={`relative w-full h-auto p-4 rounded-md border-1 border-divider hover:border-foreground-500 ${
				selectedElementId === id && "border-foreground-500"
			}`}
			onMouseEnter={() => setMouseIsOver(true)}
			onMouseLeave={() => setMouseIsOver(false)}
			ref={dragable.setNodeRef}
			{...dragable.listeners}
			{...dragable.attributes}
			onClick={(e) => {
				e.stopPropagation();
				setSelectedElement(id);
			}}
		>
			<div
				className="w-full h-1/2 rounded-full absolute top-0 left-0"
				ref={topHalf.setNodeRef}
			></div>
			<GetContext type={type} formElement={formElements[id]} />
			<div
				className="w-full h-1/2 rounded-full absolute bottom-0 left-0"
				ref={bottomHalf.setNodeRef}
			></div>
			{topHalf.isOver && (
				<div className="w-full h-1 rounded-full bg-white absolute top-0 left-0"></div>
			)}
			{bottomHalf.isOver && (
				<div className="w-full h-1 rounded-full bg-white absolute bottom-0 left-0"></div>
			)}
			{mouseIsOver && (
				<div className="w-full h-full absolute left-0 top-0 backdrop-blur grid grid-cols-[_1fr,40px] cursor-grab rounded-md overflow-hidden">
					<span
						className={`w-full h-full flex justify-center items-center text-foreground-500`}
					>
						Click or Drag and Drop to move element
					</span>
					<button
						className="w-full h-full bg-red-500 flex justify-center items-center cursor-pointer"
						onClick={(e) => {
							e.preventDefault();
							e.stopPropagation();
							removeFormElement(id as string);
						}}
					>
						<FaRegTrashAlt className="w-4 h-4 text-white" />
					</button>
				</div>
			)}
		</div>
	);
};

const GetContext = ({
	formElement,
	type,
}: {
	formElement: FormElement;
	type: ElementsTypes;
}) => {
	let content;
	switch (type) {
		case "TextField":
			content = <TextField formElement={formElement} />;
			break;
		case "NumberField":
			content = <NumberField formElement={formElement} />;
			break;

		case "PasswordField":
			content = <PasswordField formElement={formElement} />;
			break;
		default:
			content = <div>Unsupported Element</div>;
	}
	return content;
};

export default RootFormDesignElement;

--------------------------------------------------

File Path: src\app\form-builder\_components\form-design-elements\TextField.tsx
Contents:
import React from "react";
import { FormElement } from "../types";

const TextField = ({ formElement }: { formElement: FormElement }) => {
	const { placeholder, label } = formElement.payload;
	return (
		<div className="w-full h-auto grid grid-cols-1 gap-2">
			<div className="w-full h-auto p-0 text-sm px-1">
				{label}
			</div>
			<div className="w-full h-auto px-3 py-1 rounded-md bg-default-100 text-foreground-400 text-base">
				{placeholder}
			</div>
		</div>
	);
};

export default TextField;

--------------------------------------------------

File Path: src\app\form-builder\_components\FormBuilder.tsx
Contents:
"use client";

import { DndContext, MouseSensor, useSensor, useSensors } from "@dnd-kit/core";
import React, { useEffect, useState } from "react";
import { PiSunBold, PiMoonStarsBold } from "react-icons/pi";
import { FormElementsProvider } from "./design-context";
import DesignMode from "./design-mode";
import { IoEye } from "react-icons/io5";
import { FaCode } from "react-icons/fa6";
import PreviewMode from "./preview-mode";

const FormBuilder = () => {
	const [theme, setTheme] = useState<boolean>(false);
	const [preview, setPreview] = useState<"preview" | "code">("code");
	const mouseSensor = useSensor(MouseSensor, {
		activationConstraint: {
			distance: 10, // 10px
		},
	});
	const sensors = useSensors(mouseSensor);
	useEffect(() => {
		document.documentElement.className = theme ? "light" : "dark";
	}, [theme]);

	return (
		<DndContext sensors={sensors}>
			<FormElementsProvider>
				<div className="w-full h-full grid grid-rows-[80px,1fr]">
					<div className="w-full flex justify-between items-center px-5 border-b border-divider">
						<h1 className="text-xl text-foreground">Project 1</h1>
						<div className="w-auto h-auto flex justify-center items-center gap-3">
							<div className="flex items-center gap-1 relative border-1 border-divider rounded-full overflow-hidden px-1">
								<button
									className={`w-1/2 h-7 p-1 z-10 flex justify-center items-center ${
										theme ? "text-white" : "text-gray-700"
									}`}
									onClick={() => {
										setTheme(true);
									}}
								>
									<PiSunBold />
								</button>
								<button
									className={`w-1/2 flex justify-center items-center h-7 p-1 z-10 ${
										theme ? "text-gray-700" : "text-white"
									}`}
									onClick={() => setTheme(false)}
								>
									<PiMoonStarsBold />
								</button>
								<div
									className={`w-1/2 h-full rounded-sm bg-primary absolute top-0 transition-all duration-300 ${
										theme ? "left-0" : "left-1/2"
									}`}
								></div>
							</div>

							<button
								className="px-3 py-1 rounded-md bg-primary hover:bg-primary-500 transition-all duration-300 text-white flex justify-center items-center gap-2 text-sm"
								onClick={() =>
									setPreview(
										preview === "code" ? "preview" : "code"
									)
								}
							>
								<span>
									{preview === "preview" ? "Code" : "Preview"}
								</span>
								{preview === "preview" ? <FaCode /> : <IoEye />}
							</button>
						</div>
					</div>
					<div className="w-full h-full overflow-hidden">
						{preview === "code" ? (
							<DesignMode />
						) : (
							<PreviewMode />
						)}
					</div>
				</div>
			</FormElementsProvider>
		</DndContext>
	);
};

export default FormBuilder;

--------------------------------------------------

File Path: src\app\form-builder\_components\preview-mode\index.tsx
Contents:
import React from 'react'

const PreviewMode = () => {
  return (
	<div className='w-full h-full graph-content bg-background flex justify-center p-5 items-start'>
		<div className='h-auto w-2/3 rounded-md border-1 border-divider max-h-full bg-background overflow-auto p-3 flex justify-center items-center'>
			Preview
		</div>
	</div>
  )
}

export default PreviewMode
--------------------------------------------------

File Path: src\app\form-builder\_components\sidebar-elements\FormElementProperties.tsx
Contents:
import React from "react";
import { useFormElements } from "../design-context";
import { IoClose } from "react-icons/io5";
import { getFieldType } from "../types/elements";
import { ElementsTypes } from "../types";

interface FormElementPropertiesProps {
	id: string;
}

const FormElementProperties: React.FC<FormElementPropertiesProps> = ({
	id,
}) => {
	const { formElements, updateFormElementPayload, setSelectedElement } =
		useFormElements();
	const { label, placeholder, required, type } = formElements[id].payload;

	const commonLabelStyle = "w-full h-auto text-foreground text-sm";
	const commonInputStyle =
		"w-full rounded text-base px-3 py-1 outline-none border-none bg-foreground-100";

	const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
		const { value, checked, name } = event.target;
		const newValue = name === "required" ? checked : value;
		updateFormElementPayload(id, { [name]: newValue });
	};

	return (
		<div className="w-full h-auto grid grid-cols-1 gap-5">
			<div className="w-full h-auto grid grid-cols-[1fr,40px] border-b-1 border-divider pb-3">
				<h2 className="text-base text-foreground">Property</h2>
				<button
					className="w-full h-full text-foreground-500 hover:bg-foreground-500/30 hover:text-foreground transition-all duration-300 rounded-md flex justify-center items-center cursor-pointer"
					onClick={() => setSelectedElement(null)}
				>
					<IoClose className="w-4 h-4" />
				</button>
			</div>

			<div className="w-full h-auto grid grid-cols-1 gap-3 px-2">
				{/* --------[ LABEL ]------- */}
				<div className="w-full h-auto space-y-1">
					<label className={commonLabelStyle}>Label</label>
					<input
						type="text"
						name="label"
						className={commonInputStyle}
						value={label}
						onChange={handleInputChange}
					/>
					<div className="w-full h-auto grid grid-cols-1 text-xs text-foreground-500">
						<span>- The label of the field</span>
						<span>- It will be displayed above the field</span>
					</div>
				</div>

				{/* --------[ INPUT TYPE ]------- */}
				<div className="w-full h-auto space-y-1">
					<label className={commonLabelStyle}>Input type</label>
					<input
						type="text"
						className={`${commonInputStyle} text-foreground-400`}
						value={getFieldType(type as ElementsTypes)}
						disabled
					/>
					<div className="w-full h-auto grid grid-cols-1 text-xs text-foreground-500">
						<span>- The type of the field</span>
						<span>- It will be a type of input</span>
					</div>
				</div>

				{/* --------[ PLACEHOLDER ]------- */}
				<div className="w-full h-auto space-y-1">
					<label className={commonLabelStyle}>Placeholder</label>
					<input
						type="text"
						name="placeholder"
						className={commonInputStyle}
						value={placeholder}
						onChange={handleInputChange}
					/>
					<div className="w-full h-auto grid grid-cols-1 text-xs text-foreground-500">
						<span>- The placeholder of the field</span>
						<span>
							- It will be displayed as a placeholder in the field
						</span>
					</div>
				</div>

				{/* --------[ PASSWORD ]------- */}
				{type === "PasswordField" && (
					<div className="w-full h-auto space-y-1">
						<label className={commonLabelStyle}>
							Password Pattern
						</label>
						<input
							type="text"
							name="pattern"
							className={commonInputStyle}
							value={formElements[id].payload?.pattern as string}
							pattern={
								formElements[id].payload?.pattern as string
							}
							onChange={handleInputChange}
						/>
						<div className="w-full h-auto grid grid-cols-1 text-xs text-foreground-500">
							<span>- The Pattern of the Password</span>
							<span>
								- It will be displayed as a Pattern to show
								Password
							</span>
						</div>
					</div>
				)}

				{/* --------[ REQUIRED ]------- */}
				<div className="w-full h-auto grid grid-cols-[1fr,80px] gap-1">
					<div className="grid grid-cols-1 gap-0">
						<label className={commonLabelStyle}>Required</label>
						<label className="text-xs text-foreground-500">
							- Marks the field as required
						</label>
					</div>
					<div className="w-full h-full flex justify-end items-center">
						<input
							id="required"
							name="required"
							type="checkbox"
							className="hidden"
							checked={required}
							onChange={handleInputChange}
						/>
						<label
							htmlFor="required"
							className={`w-12 h-6 border-2 rounded-full relative cursor-pointer p-1 ${
								required
									? "bg-primary-500 border-primary-500"
									: "bg-foreground-200 border-foreground-200"
							}`}
						>
							<span
								className={`absolute top-0 ${
									required ? "left-1/2" : "left-0"
								} w-6 h-full bg-background dark:bg-foreground-800 rounded-full transition-all duration-200 shadow-md`}
							/>
						</label>
					</div>
				</div>
			</div>
		</div>
	);
};

export default FormElementProperties;

--------------------------------------------------

File Path: src\app\form-builder\_components\sidebar-elements\index.tsx
Contents:
import { FormElement } from "@/app/form-builder/_components/types";
import { FormElementTypes } from "@/app/form-builder/_components/types/elements";
import { useDraggable } from "@dnd-kit/core";
import React from "react";
import { useFormElements } from "../design-context";
import FormElementProperties from "./FormElementProperties";

const SideBarButtons = () => {
	const { selectedElementId } = useFormElements();
	return (
		<React.Fragment>
			{!selectedElementId && (
				<div className="w-full h-full grid grid-cols-2 gap-3 px-3 place-content-start place-items-start">
					{Object.keys(FormElementTypes).map((items: string) => (
						<DragableButton
							formElement={FormElementTypes[items]}
							key={FormElementTypes[items].id}
						/>
					))}
				</div>
			)}
			{selectedElementId && (
				<div className="w-full h-full px-3 grid grid-cols-1 gap-3 place-content-start place-items-start overflow-auto">
					<FormElementProperties id={selectedElementId} />
				</div>
			)}
		</React.Fragment>
	);
};

export default SideBarButtons;

const DragableButton = ({ formElement }: { formElement: FormElement }) => {
	const { icon: Icon, label } = formElement.sidebarElement;
	const dragable = useDraggable({
		id: "design-btn-" + formElement.type,
		data: {
			isDesignBtnElement: true,
			type: formElement.type,
		},
	});
	return (
		<button
			ref={dragable.setNodeRef}
			className={`w-full h-auto p-3 rounded-md border-divider bg-background border-1 place-items-center grid grid-cols-1 hover:border-foreground-500 hover:bg-foreground-100/50 transition-all duration-300 ${
				dragable.isDragging &&
				"ring-2 ring-foreground-500 bg-foreground-100/50"
			}`}
			{...dragable.listeners}
			{...dragable.attributes}
		>
			<Icon className="w-7 h-7 text-foreground" />
			<span className="text-xs text-foreground">{label}</span>
		</button>
	);
};

interface OverlayButton {
	icon: React.ElementType;
	label: string;
}

export const DragableOverlayButton = (element: OverlayButton) => {
	const { icon: Icon, label } = element;
	return (
		<button
			className={`w-full h-auto p-3 rounded-md border-1 border-foreground dark:bg-background place-items-center grid grid-cols-1`}
		>
			<Icon className="w-7 h-7 text-foreground" />
			<span className="text-xs text-foreground">{label}</span>
		</button>
	);
};

--------------------------------------------------

File Path: src\app\form-builder\_components\types\elements.ts
Contents:
// elements.ts

import { FormElement, FormElements } from ".";
import { MdTextFields } from "react-icons/md";
import { TbNumber123 } from "react-icons/tb";
import { TbPasswordUser } from "react-icons/tb";

export const FormElementTypes: FormElements = {
	TextField: new FormElement("TextField", MdTextFields, "Text Field"),
	NumberField: new FormElement("NumberField", TbNumber123, "Number Field"),
	PasswordField: new FormElement(
		"PasswordField",
		TbPasswordUser,
		"Password Field",
		{
			pattern: "*",
		}
	),
};

export const getFieldType = (
	field: string
): "text" | "number" | "password" | undefined => {
	switch (field) {
		case FormElementTypes.TextField.type:
			return "text";
		case FormElementTypes.NumberField.type:
			return "number";
		case FormElementTypes.PasswordField.type:
			return "password";
		default:
			return undefined; // Handle unknown fields
	}
};

--------------------------------------------------

File Path: src\app\form-builder\_components\types\index.ts
Contents:
import React from "react";

export type ElementsTypes = "TextField" | "NumberField" | "PasswordField";

export interface FormElementPayload {
  label: string;
  name: string;
  required?: boolean;
  placeholder?: string;
  options?: string[];
  type?: string;
  [key: string]: string | boolean | string[] | undefined;
}

export class FormElement {
  id: string;
  type: ElementsTypes;
  sidebarElement: {
    icon: React.ElementType;
    label: string;
  };
  payload: FormElementPayload;

  constructor(
    type: ElementsTypes,
    icon: React.ElementType,
    label: string,
    payload: Partial<FormElementPayload> = {}
  ) {
    this.id = `${crypto.randomUUID()}`;
    this.type = type;
    this.sidebarElement = { icon, label };
    this.payload = {
      name: label.toLowerCase().replace(/\s+/g, "-"),
      required: false,
      placeholder: `Enter ${label.toLowerCase()}...`,
      type,
      label:label,
      ...payload,
    };
  }
}

export type FormElements = {
  [formElementId: string]: FormElement;
};

--------------------------------------------------

